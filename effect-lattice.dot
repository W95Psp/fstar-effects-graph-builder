digraph G {
ALL;
GST;
STATE;
DIV;
STATE_h;
EXN;
ALL_h;
READER;
READER_h;
STATE2;
TAC;
GHOST[style="filled",fillcolor="#bae3ff"];
PURE[style="filled",fillcolor="#bae3ff"];
All[style="dotted"];
ML[style="dotted"];
Unsafe[style="dotted"];
Stack[style="dotted"];
Heap[style="dotted"];
ST[style="dotted"];
St[style="dotted"];
StackInline[style="dotted"];
Inline[style="dotted"];
STL[style="dotted"];
Div[style="dotted"];
Dv[style="dotted"];
EXT[style="dotted"];
Exn[style="dotted"];
Ex[style="dotted"];
STRead[style="dotted"];
ST2[style="dotted"];
St2[style="dotted"];
State[style="dotted"];
TacH[style="dotted"];
Tac[style="dotted"];
TacS[style="dotted"];
TacF[style="dotted"];
Pure[style="dotted,filled",fillcolor="#bae3ff"];
Admit[style="dotted,filled",fillcolor="#bae3ff"];
Tot[style="dotted,filled",fillcolor="#bae3ff"];
GTot[style="dotted,filled",fillcolor="#bae3ff"];
Ghost[style="dotted,filled",fillcolor="#bae3ff"];
Lemma[style="dotted,filled",fillcolor="#bae3ff"];
M[style="dotted,filled",fillcolor="#bae3ff"];
GST->STATE;
STATE->ALL;
DIV->GST;
DIV->STATE;
DIV->EXN;
DIV->READER;
DIV->STATE2;
DIV->TAC;
EXN->ALL;
READER->STATE;
PURE->DIV;
PURE->GHOST;
All->ALL[style="dotted"];
ML->ALL[style="dotted"];
Unsafe->STATE[style="dotted"];
Stack->STATE[style="dotted"];
Heap->STATE[style="dotted"];
ST->STATE[style="dotted"];
St->ST[style="dotted"];
StackInline->STATE[style="dotted"];
Inline->STATE[style="dotted"];
STL->Stack[style="dotted"];
Div->DIV[style="dotted"];
Dv->DIV[style="dotted"];
EXT->Dv[style="dotted"];
Exn->EXN[style="dotted"];
Ex->Exn[style="dotted"];
STRead->READER[style="dotted"];
ST2->STATE2[style="dotted"];
St2->ST2[style="dotted"];
State->STATE[style="dotted"];
TacH->TAC[style="dotted"];
Tac->TacH[style="dotted"];
TacS->TacH[style="dotted"];
TacF->TacH[style="dotted"];
Pure->PURE[style="dotted"];
Admit->PURE[style="dotted"];
Tot->PURE[style="dotted"];
GTot->GHOST[style="dotted"];
Ghost->GHOST[style="dotted"];
Lemma->Pure[style="dotted"];
M->Tot[style="dotted"];
ALL->ALL_h[color="#f1c40f"];
GST->STATE_h[color="#f1c40f"];
STATE->STATE_h[color="#f1c40f"];
DIV->PURE[color="#f1c40f"];
READER->READER_h[color="#f1c40f"];
STATE2->STATE_h[color="#f1c40f"];
GHOST->PURE[color="#f1c40f"];
All->ALL_h[color="#f1c40f"];
ML->ALL_h[color="#f1c40f"];
Unsafe->STATE_h[color="#f1c40f"];
Stack->STATE_h[color="#f1c40f"];
Heap->STATE_h[color="#f1c40f"];
ST->STATE_h[color="#f1c40f"];
St->STATE_h[color="#f1c40f"];
StackInline->STATE_h[color="#f1c40f"];
Inline->STATE_h[color="#f1c40f"];
STL->STATE_h[color="#f1c40f"];
Div->PURE[color="#f1c40f"];
Dv->PURE[color="#f1c40f"];
EXT->PURE[color="#f1c40f"];
STRead->READER_h[color="#f1c40f"];
ST2->STATE_h[color="#f1c40f"];
St2->STATE_h[color="#f1c40f"];
State->STATE_h[color="#f1c40f"];
GTot->PURE[color="#f1c40f"];
Ghost->PURE[color="#f1c40f"];

}
