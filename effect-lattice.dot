digraph G {
ALL[tooltip="FStar.HyperStack.All.fst:22"];
GST[tooltip="FStar.ST.fst:25"];
STATE[tooltip="reclaimable/FStar.ST.fst:28"];
DIV[tooltip="FStar.Pervasives.fst:23"];
STATE_h[tooltip="FStar.Pervasives.fst:86"];
EXN[tooltip="FStar.Pervasives.fst:141"];
ALL_h[tooltip="FStar.Pervasives.fst:209"];
READER[tooltip="FStar.Reader.fst:81"];
READER_h[tooltip="FStar.Reader.fst:67"];
STATE2[tooltip="FStar.Relational.Comp.fst:23"];
TAC[tooltip="FStar.Tactics.Effect.fst:82"];
GHOST[style="filled",fillcolor="#bae3ff",tooltip="prims.fst:229"];
PURE[style="filled",fillcolor="#bae3ff",tooltip="prims.fst:204"];
All[style="dotted",tooltip="FStar.All.fst:22"];
ML[style="dotted",tooltip="FStar.All.fst:22"];
Unsafe[style="dotted",tooltip="FStar.HyperStack.ST.fsti:28"];
Stack[style="dotted",tooltip="FStar.HyperStack.ST.fsti:28"];
Heap[style="dotted",tooltip="FStar.HyperStack.ST.fsti:28"];
ST[style="dotted",tooltip="FStar.HyperStack.ST.fsti:28"];
St[style="dotted",tooltip="FStar.HyperStack.ST.fsti:28"];
StackInline[style="dotted",tooltip="FStar.HyperStack.ST.fsti:28"];
Inline[style="dotted",tooltip="FStar.HyperStack.ST.fsti:28"];
STL[style="dotted",tooltip="FStar.HyperStack.ST.fsti:28"];
Div[style="dotted",tooltip="FStar.Pervasives.fst:23"];
Dv[style="dotted",tooltip="FStar.Pervasives.fst:23"];
EXT[style="dotted",tooltip="FStar.Pervasives.fst:23"];
Exn[style="dotted",tooltip="FStar.Pervasives.fst:141"];
Ex[style="dotted",tooltip="FStar.Pervasives.fst:141"];
STRead[style="dotted",tooltip="FStar.Reader.fst:81"];
ST2[style="dotted",tooltip="FStar.Relational.Comp.fst:23"];
St2[style="dotted",tooltip="FStar.Relational.Comp.fst:23"];
State[style="dotted",tooltip="FStar.ST.fst:28"];
TacH[style="dotted",tooltip="FStar.Tactics.Effect.fst:82"];
Tac[style="dotted",tooltip="FStar.Tactics.Effect.fst:82"];
TacS[style="dotted",tooltip="FStar.Tactics.Effect.fst:82"];
TacF[style="dotted",tooltip="FStar.Tactics.Effect.fst:82"];
Pure[style="dotted,filled",fillcolor="#bae3ff",tooltip="prims.fst:204"];
Admit[style="dotted,filled",fillcolor="#bae3ff",tooltip="prims.fst:204"];
Tot[style="dotted,filled",fillcolor="#bae3ff",tooltip="prims.fst:204"];
GTot[style="dotted,filled",fillcolor="#bae3ff",tooltip="prims.fst:229"];
Ghost[style="dotted,filled",fillcolor="#bae3ff",tooltip="prims.fst:229"];
Lemma[style="dotted,filled",fillcolor="#bae3ff",tooltip="prims.fst:204"];
M[style="dotted,filled",fillcolor="#bae3ff",tooltip="prims.fst:204"];
GST->STATE;
STATE->ALL;
DIV->GST;
DIV->STATE;
DIV->EXN;
DIV->READER;
DIV->STATE2;
DIV->TAC;
EXN->ALL;
READER->STATE;
PURE->DIV;
PURE->GHOST;
All->ALL[style="dotted"];
ML->ALL[style="dotted"];
Unsafe->STATE[style="dotted"];
Stack->STATE[style="dotted"];
Heap->STATE[style="dotted"];
ST->STATE[style="dotted"];
St->ST[style="dotted"];
StackInline->STATE[style="dotted"];
Inline->STATE[style="dotted"];
STL->Stack[style="dotted"];
Div->DIV[style="dotted"];
Dv->DIV[style="dotted"];
EXT->Dv[style="dotted"];
Exn->EXN[style="dotted"];
Ex->Exn[style="dotted"];
STRead->READER[style="dotted"];
ST2->STATE2[style="dotted"];
St2->ST2[style="dotted"];
State->STATE[style="dotted"];
TacH->TAC[style="dotted"];
Tac->TacH[style="dotted"];
TacS->TacH[style="dotted"];
TacF->TacH[style="dotted"];
Pure->PURE[style="dotted"];
Admit->PURE[style="dotted"];
Tot->PURE[style="dotted"];
GTot->GHOST[style="dotted"];
Ghost->GHOST[style="dotted"];
Lemma->Pure[style="dotted"];
M->Tot[style="dotted"];
ALL->ALL_h[color="#f6e58d"];
GST->STATE_h[color="#f6e58d"];
STATE->STATE_h[color="#f6e58d"];
DIV->PURE[color="#f6e58d"];
READER->READER_h[color="#f6e58d"];
STATE2->STATE_h[color="#f6e58d"];
GHOST->PURE[color="#f6e58d"];
All->ALL_h[color="#f6e58d"];
ML->ALL_h[color="#f6e58d"];
Unsafe->STATE_h[color="#f6e58d"];
Stack->STATE_h[color="#f6e58d"];
Heap->STATE_h[color="#f6e58d"];
ST->STATE_h[color="#f6e58d"];
St->STATE_h[color="#f6e58d"];
StackInline->STATE_h[color="#f6e58d"];
Inline->STATE_h[color="#f6e58d"];
STL->STATE_h[color="#f6e58d"];
Div->PURE[color="#f6e58d"];
Dv->PURE[color="#f6e58d"];
EXT->PURE[color="#f6e58d"];
STRead->READER_h[color="#f6e58d"];
ST2->STATE_h[color="#f6e58d"];
St2->STATE_h[color="#f6e58d"];
State->STATE_h[color="#f6e58d"];
GTot->PURE[color="#f6e58d"];
Ghost->PURE[color="#f6e58d"];

}
